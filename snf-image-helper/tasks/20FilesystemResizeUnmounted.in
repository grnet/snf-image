#! /bin/bash

# Copyright (C) 2011, 2015 GRNET S.A. and individual contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

### BEGIN TASK INFO
# Provides:		FilesystemResizeUnmounted
# RunBefore:		MountImage
# RunAfter:             FixPartitionTable
# Short-Description:	Resize file system to use all the available space
### END TASK INFO

set -e
. "@commondir@/common.sh"

trap task_cleanup EXIT
report_task_start

# Check if the task should be prevented from running.
check_if_excluded
check_if_filesystem_resize_excluded

if [ ! -b "$SNF_IMAGE_DEV" ]; then
    log_error "Device file:\`${SNF_IMAGE_DEV}' is not a block device"
fi

if [[ "$SNF_IMAGE_PROPERTY_OSFAMILY" =~ ^(open|net)bsd$ ]]; then
    bsd_part="$(@scriptsdir@/disklabel.py --get-last-partition "$SNF_IMAGE_DEV")"
    if [ "$bsd_part" = "b" ]; then
        warn "Last partition is swap space. Resizing ommited"
        exit 0
    fi

    part="${SNF_IMAGE_DEV}$(bsd2linux "$bsd_part" "$SNF_IMAGE_DEV")"

    $DUMPFS_OPENBSD "$part" > /dev/null ||
        { warn "Filesystem is not UFS. Resizing ommited"; exit 0; }

    $GROWFS_OPENBSD -y "$part"
    exit 0
fi

if [ -z "$SNF_IMAGE_RESIZE_PART" ]; then
    warn "No partition chosen for resize"
    exit 0
fi

if check_yes_no SNF_IMAGE_PROPERTY_DO_SYNC; then
    unset EATMYDATA
fi

table=$(get_partition_table "$SNF_IMAGE_DEV")
partition=$(get_partition_by_num "$table" "$SNF_IMAGE_RESIZE_PART")
id=$(cut -d: -f1 <<< "$partition")
ptype=$(cut -d: -f5 <<< "$partition")

device="${SNF_IMAGE_DEV}${id}"

if [[ "$ptype" == ext[234] ]]; then
    state=$($TUNE2FS -l "$device" | grep ^Filesystem\ state: | cut -d: -f2);
    state=$(echo $state) #trim the value

    # NOTE: A filesystem might be clean but its journal may need recovery. This
    # is typical when the filesystem is a snapshot of a running VM. So we do an
    # fsck, which will fix the journal and then we resize the filesystem,
    # otherwise we almost always end up with a corrupted filesystem and an
    # un-bootable VM.
    if [ "$state" = "clean" ]; then
        # NOTE: We use automatic repair (-p) because otherwise e2fsck complains
        # that it needs a terminal for interactive repairs.
        $E2FSCK -p "$device" || \
            log_error "Filesytem was clean but fsck exited with error code $?"
        $EATMYDATA $RESIZE2FS -f "$device"
    else
        log_error "The file system state of partition: \`$device' " \
            " is not clean (state = $state)"
    fi
elif [[ "$ptype" == "freebsd-ufs" ]]; then
    $GROWFS_UFS -y "$device"
elif [[ "$ptype" == "ntfs" ]]; then
    # Since ntfsresize will mark the file system as dirty and will schedule it
    # for CHKDSK, it's better not to mount it afterwards. This is why we have
    # a separate task for growing NTFS partitions after snf-image-helper has
    # umounted everything.
    warn "Not resizing NTFS partitions on this task"
else
    warn "Don't know how to resize unmounted partition \`$id' with file system \`$ptype'."
fi

exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
