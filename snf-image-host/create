#!/bin/bash

# Copyright (C) 2011-2016 GRNET S.A. and individual contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e
set -o pipefail

. common.sh

ganeti_os_main

parameter_check

SRC_BACKEND_TYPE=$(get_src_backend_type)
DST_BACKEND_TYPE=$(get_dst_backend_type)

if [ "$IMAGE_DEBUG" = "yes" ]; then
    PS4='$(date "+%s.%N ($LINENO) + ")'
    set -x
elif [ "$IMAGE_DEBUG" != "no" ]; then
    log_warning "Unsupported IMAGE_DEBUG value: \`$IMAGE_DEBUG'"
fi

monitor_pipe=$(mktemp -u)
mkfifo -m 600 "$monitor_pipe"
add_cleanup rm -f "$monitor_pipe"

if [ -n "$PROGRESS_MONITOR" ]; then
    { sleep 1; $PROGRESS_MONITOR "$instance" < "$monitor_pipe" ; } &
    monitor_pid="$!"
else
    sed -u 's|^|[MONITOR] |g' < "$monitor_pipe" &
    monitor_pid="$!"
fi

# Create file descriptor to monitor_pipe
exec {MONITOR_FD}>${monitor_pipe}
add_cleanup  close_fd ${MONITOR_FD}

# Ignore sigpipe signals. If progress monitor is dead and snf-image tries to
# output something to the opened pipe, then a sigpipe will be raised. If we do
# not catch this, the program will terminate.
trap "" SIGPIPE

trap report_and_cleanup EXIT

echo "Processing image with ID: \`$IMG_ID' and type: \`$IMG_FORMAT'" >&2

echo "Using source backend \`$SRC_BACKEND_TYPE' and destination backend \`$DST_BACKEND_TYPE'" >&2

case "$IMG_FORMAT" in
    ntfsdump|extdump|diskdump)
        snf_export_PROPERTY_ROOT_PARTITION=1
        if [ "$IMG_FORMAT" = "ntfsdump" ]; then
            snf_export_PROPERTY_OSFAMILY="windows"
        else
            snf_export_PROPERTY_OSFAMILY="linux"
        fi
        ;;
    *)
        log_error "Unknown Image format: \`$IMG_FORMAT'"
        report_error "Unknown Image Format"
        exit 1
        ;;
esac

if [ "$SRC_BACKEND_TYPE" = "null" ]; then
    report_info "Skipping image copy since no image provided (IMG_ID=null)..."
else
    src_script=backends/src/${SRC_BACKEND_TYPE}
    dst_script=backends/dst/${DST_BACKEND_TYPE}

    if [ ! -x $src_script ]; then
        log_error "Missing src script for backend type \`$SRC_BACKEND_TYPE'"
        report_error "Unable to retrieve image"
        exit 1
    fi

    if [ ! -x $dst_script ]; then
        log_error "Missing dst script for backend type \`$DST_BACKEND_TYPE'"
        report_error "Unable to copy image"
        exit 1
    fi

    image_size=$($src_script -s $IMG_ID $IMG_FORMAT)

    if [ -z "$image_size" ]; then
        log_error "src script did not return a valid image size"
        report_error "Unable to retrieve image size"
        exit 1
    fi

    monitor="$PWD/copy-monitor.py -o $MONITOR_FD -r $image_size"

    report_info "Starting image copy..."

    $src_script $IMG_ID $IMG_FORMAT | $monitor $DD bs=1M | $dst_script $disk0 $IMG_FORMAT

    report_info "Image copy finished."

fi


# Create a floppy image
floppy=$(mktemp --tmpdir floppy.XXXXXX)
add_cleanup rm "$floppy"

snf_export_TYPE="$IMG_FORMAT"
snf_export_HOSTNAME="$instance"
snf_export_DHCP_TAGS="$DHCP_TAGS"
snf_export_STATEFUL_DHCPV6_TAGS="$STATEFUL_DHCPV6_TAGS"
snf_export_STATELESS_DHCPV6_TAGS="$STATELESS_DHCPV6_TAGS"

if [ -n "${IMG_PASSWD+dummy}" ]; then
    snf_export_PASSWD="$IMG_PASSWD"
fi

if [ -n "${IMG_PASSWD_HASH+dummy}" ]; then
    snf_export_PASSWD_HASH="$IMG_PASSWD_HASH"
fi

if [ -n "$IMG_PROPERTIES" ]; then
    snf_export_PROPERTIES="$IMG_PROPERTIES"
fi
if [ -n "$IMG_PERSONALITY" ]; then
    snf_export_PERSONALITY="$IMG_PERSONALITY"
fi

if [ -n "${OS_PRODUCT_KEY+dummy}" ]; then
    snf_export_OS_PRODUCT_KEY="$OS_PRODUCT_KEY"
fi

assign_disk_devices_to snf_export_DEV

create_floppy "$floppy"

launch_helper "$floppy"

report_info "Image customization finished successfully."

# Execute cleanups
cleanup
trap - EXIT

exit 0

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
